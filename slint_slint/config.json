{"name": "slint", "author": "slint", "version": "1.4.1", "all_version": ["1.4.0", "1.3.2", "1.3.1", "1.3.0", "1.2.2", "1.2.1", "1.2.0~1", "1.2.0-alpha5", "pre-release", "1.2.0-alpha4", "pre-release", "1.2.0-alpha3", "pre-release"], "license": "GPL-3.0-only OR LicenseRef-Slint-Royalty-free-1.1 OR LicenseRef-Slint-commercial", "keywords": [], "description": "Slint \u2014 declarative GUI toolkit", "readme": "\n<h1 id=\"slint\">Slint</h1>\n<p><a href=\"https://components.espressif.com/components/slint/slint\"><img src=\"https://components.espressif.com/components/slint/slint/badge.svg\" alt=\"Component Registry\"></a></p>\n<p>Slint is a declarative GUI toolkit to build native user interfaces for desktop and embedded applications written in Rust, C++, or JavaScript.</p>\n<p>This component provides the C++ version of <a href=\"https://slint.dev/\">Slint</a> for the <a href=\"https://docs.espressif.com/projects/esp-idf/en/latest/esp32/index.html\">Espressif IoT Development Framework</a>.</p>\n<p>It has been tested on ESP32-S3 devices.</p>\n<p><img src=\"https://user-images.githubusercontent.com/959326/260754861-e2130cce-9d2b-4925-9536-88293818ac3e.jpeg\" alt=\"Screenshot\"></p>\n<h2 id=\"getting-started\">Getting Started</h2>\n<h3 id=\"prerequisites\">Prerequisites</h3>\n<ul>\n<li>Install the <a href=\"https://docs.espressif.com/projects/esp-idf/en/latest/esp32/index.html\">Espressif IoT Development Framework</a> and open a terminal or command prompt with the environment set up.\nOn Windows, follow the <a href=\"https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/windows-setup.html#using-the-command-prompt\">Using the Command Prompt</a> instructions, on macOS and Linux, follow the\n<a href=\"https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/linux-macos-setup.html#step-4-set-up-the-environment-variables\">Set up the Environment Variables</a> instructions.</li>\n<li>Make sure that you have <a href=\"https://esp-rs.github.io/book/installation/rust.html\">Rust</a> installed.</li>\n<li>Install the Rust toolchains for <a href=\"https://esp-rs.github.io/book/installation/riscv-and-xtensa.html\">Espressif SoCs with Xtensa and RISC-V targets</a>.</li>\n</ul>\n<h3 id=\"hello-world\">Hello World</h3>\n<p>The following steps will guide from the a bare-bones esp-idf \"hello_world\" to a GUI with Slint.</p>\n<ol>\n<li>Start by creating a new project:</li>\n</ol>\n<pre style=\"padding: 0px;\"><div class=\"flex justify-between items-center\" style=\"background-color: rgb(55, 67, 88); padding: 0rem 1rem;\"><p class=\"text-sm font-medium text-white-700\" style=\"margin:10px\">Bash</p><button class=\"float-right text-white rounded cursor-pointer tooltip-button\"><img src=\"/static/icons/utils/copy-b9de36a5f9c92ed5c80eb0284941cef5.svg\" alt=\"Copy To Clipboard\" width=\"16px\" height=\"16px\" style=\"filter: invert(1); margin: 0;\"></button><div role=\"tooltip\" class=\"py-2 px-3 z-10 float-right shadow-sm opacity-0 transition-opacity duration-300 text-sm font-medium text-white bg-gray-90 rounded cursor-pointer invisible tooltip rounded-lg\" data-popper-placement=\"top\" data-popper-reference-hidden=\"\" data-popper-escaped=\"\" style=\"background-color: black; position: absolute; inset: auto auto 0px 0px; margin: 0px; transform: translate3d(828px, 1059.2px, 0px);\"><p style=\"margin: 0;\">Copy to Clipboard</p><div class=\"tooltip-arrow\" data-popper-arrow=\"\" style=\"position: absolute; left: 0px; transform: translate3d(73.6px, 0px, 0px);\"></div></div></div><code class=\"hljs language-bash\" id=\"codeblock-0\">idf.py create-project slint-hello-world\n<span class=\"hljs-built_in\">cd</span> slint-hello-world\n</code></pre><ol>\n<li>Select your chipset with <code>idf.py set-target</code>, for example if you're using an <code>ESP32S3</code> chipset, run</li>\n</ol>\n<pre style=\"padding: 0px;\"><div class=\"flex justify-between items-center\" style=\"background-color: rgb(55, 67, 88); padding: 0rem 1rem;\"><p class=\"text-sm font-medium text-white-700\" style=\"margin:10px\">Bash</p><button class=\"float-right text-white rounded cursor-pointer tooltip-button\"><img src=\"/static/icons/utils/copy-b9de36a5f9c92ed5c80eb0284941cef5.svg\" alt=\"Copy To Clipboard\" width=\"16px\" height=\"16px\" style=\"filter: invert(1); margin: 0;\"></button><div role=\"tooltip\" class=\"py-2 px-3 z-10 float-right shadow-sm opacity-0 transition-opacity duration-300 text-sm font-medium text-white bg-gray-90 rounded cursor-pointer invisible tooltip rounded-lg\" data-popper-placement=\"top\" data-popper-reference-hidden=\"\" data-popper-escaped=\"\" style=\"background-color: black; position: absolute; inset: auto auto 0px 0px; margin: 0px; transform: translate3d(828px, 1251.2px, 0px);\"><p style=\"margin: 0;\">Copy to Clipboard</p><div class=\"tooltip-arrow\" data-popper-arrow=\"\" style=\"position: absolute; left: 0px; transform: translate3d(73.6px, 0px, 0px);\"></div></div></div><code class=\"hljs language-bash\" id=\"codeblock-1\">idf.py set-target esp32s3\n</code></pre><ol>\n<li>Add a <a href=\"https://github.com/espressif/esp-bsp#esp-bsp-espressifs-board-support-packages\">Board Support Package</a> that matches your device as a dependency. For example, if you're using an ESP-BOX, run</li>\n</ol>\n<pre style=\"padding: 0px;\"><div class=\"flex justify-between items-center\" style=\"background-color: rgb(55, 67, 88); padding: 0rem 1rem;\"><p class=\"text-sm font-medium text-white-700\" style=\"margin:10px\">Bash</p><button class=\"float-right text-white rounded cursor-pointer tooltip-button\"><img src=\"/static/icons/utils/copy-b9de36a5f9c92ed5c80eb0284941cef5.svg\" alt=\"Copy To Clipboard\" width=\"16px\" height=\"16px\" style=\"filter: invert(1); margin: 0;\"></button><div role=\"tooltip\" class=\"py-2 px-3 z-10 float-right shadow-sm opacity-0 transition-opacity duration-300 text-sm font-medium text-white bg-gray-90 rounded cursor-pointer invisible tooltip rounded-lg\" data-popper-placement=\"top\" data-popper-reference-hidden=\"\" data-popper-escaped=\"\" style=\"background-color: black; position: absolute; inset: auto auto 0px 0px; margin: 0px; transform: translate3d(828px, 1447.2px, 0px);\"><p style=\"margin: 0;\">Copy to Clipboard</p><div class=\"tooltip-arrow\" data-popper-arrow=\"\" style=\"position: absolute; left: 0px; transform: translate3d(73.6px, 0px, 0px);\"></div></div></div><code class=\"hljs language-bash\" id=\"codeblock-2\">idf.py add-dependency esp-box\n</code></pre><ol>\n<li>Add Slint as a dependency:</li>\n</ol>\n<pre style=\"padding: 0px;\"><div class=\"flex justify-between items-center\" style=\"background-color: rgb(55, 67, 88); padding: 0rem 1rem;\"><p class=\"text-sm font-medium text-white-700\" style=\"margin:10px\">Bash</p><button class=\"float-right text-white rounded cursor-pointer tooltip-button\"><img src=\"/static/icons/utils/copy-b9de36a5f9c92ed5c80eb0284941cef5.svg\" alt=\"Copy To Clipboard\" width=\"16px\" height=\"16px\" style=\"filter: invert(1); margin: 0;\"></button><div role=\"tooltip\" class=\"py-2 px-3 z-10 float-right shadow-sm opacity-0 transition-opacity duration-300 text-sm font-medium text-white bg-gray-90 rounded cursor-pointer invisible tooltip rounded-lg\" data-popper-placement=\"top\" data-popper-reference-hidden=\"\" data-popper-escaped=\"\" style=\"background-color: black; position: absolute; inset: auto auto 0px 0px; margin: 0px; transform: translate3d(828px, 1615.2px, 0px);\"><p style=\"margin: 0;\">Copy to Clipboard</p><div class=\"tooltip-arrow\" data-popper-arrow=\"\" style=\"position: absolute; left: 0px; transform: translate3d(73.6px, 0px, 0px);\"></div></div></div><code class=\"hljs language-bash\" id=\"codeblock-3\">idf.py add-dependency slint/slint\n</code></pre><ol>\n<li>Ensure that Espressif's Rust toolchain is selected for building. Either set the <code>RUSTUP_TOOLCHAIN</code> environment variable to the value <code>esp</code> or create a file called <code>rust-toolchain.toml</code> in your project directory with the following contents:</li>\n</ol>\n<pre style=\"padding: 0px;\"><div class=\"flex justify-between items-center\" style=\"background-color: rgb(55, 67, 88); padding: 0rem 1rem;\"><p class=\"text-sm font-medium text-white-700\" style=\"margin:10px\">Toml</p><button class=\"float-right text-white rounded cursor-pointer tooltip-button\"><img src=\"/static/icons/utils/copy-b9de36a5f9c92ed5c80eb0284941cef5.svg\" alt=\"Copy To Clipboard\" width=\"16px\" height=\"16px\" style=\"filter: invert(1); margin: 0;\"></button><div role=\"tooltip\" class=\"py-2 px-3 z-10 float-right shadow-sm opacity-0 transition-opacity duration-300 text-sm font-medium text-white bg-gray-90 rounded cursor-pointer invisible tooltip rounded-lg\" data-popper-placement=\"top\" data-popper-reference-hidden=\"\" data-popper-escaped=\"\" style=\"background-color: black; position: absolute; inset: auto auto 0px 0px; margin: 0px; transform: translate3d(828px, 1839.2px, 0px);\"><p style=\"margin: 0;\">Copy to Clipboard</p><div class=\"tooltip-arrow\" data-popper-arrow=\"\" style=\"position: absolute; left: 0px; transform: translate3d(73.6px, 0px, 0px);\"></div></div></div><code class=\"hljs language-toml\" id=\"codeblock-4\"><span class=\"hljs-section\">[toolchain]</span>\n<span class=\"hljs-attr\">channel</span> = <span class=\"hljs-string\">\"esp\"</span>\n</code></pre><ol>\n<li>Remove <code>main/slint-hello-world.c</code>.</li>\n<li>Create a new file <code>main/slint-hello-world.cpp</code> with the following contents:</li>\n</ol>\n<pre style=\"padding: 0px;\"><div class=\"flex justify-between items-center\" style=\"background-color: rgb(55, 67, 88); padding: 0rem 1rem;\"><p class=\"text-sm font-medium text-white-700\" style=\"margin:10px\">Cpp</p><button class=\"float-right text-white rounded cursor-pointer tooltip-button\"><img src=\"/static/icons/utils/copy-b9de36a5f9c92ed5c80eb0284941cef5.svg\" alt=\"Copy To Clipboard\" width=\"16px\" height=\"16px\" style=\"filter: invert(1); margin: 0;\"></button><div role=\"tooltip\" class=\"py-2 px-3 z-10 float-right shadow-sm opacity-0 transition-opacity duration-300 text-sm font-medium text-white bg-gray-90 rounded cursor-pointer invisible tooltip rounded-lg\" data-popper-placement=\"top\" data-popper-reference-hidden=\"\" data-popper-escaped=\"\" style=\"background-color: black; position: absolute; inset: auto auto 0px 0px; margin: 0px; transform: translate3d(828px, 2067.2px, 0px);\"><p style=\"margin: 0;\">Copy to Clipboard</p><div class=\"tooltip-arrow\" data-popper-arrow=\"\" style=\"position: absolute; left: 0px; transform: translate3d(73.6px, 0px, 0px);\"></div></div></div><code class=\"hljs language-cpp\" id=\"codeblock-5\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;esp_err.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;bsp/display.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;bsp/esp-bsp.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;slint-esp.h&gt;</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">if</span> defined(BSP_LCD_DRAW_BUFF_SIZE)</span>\n<span class=\"hljs-meta\">#    <span class=\"hljs-keyword\">define</span> DRAW_BUF_SIZE BSP_LCD_DRAW_BUFF_SIZE</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\n<span class=\"hljs-meta\">#    <span class=\"hljs-keyword\">define</span> DRAW_BUF_SIZE (BSP_LCD_H_RES * CONFIG_BSP_LCD_DRAW_BUF_HEIGHT)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">\"appwindow.h\"</span></span>\n\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> <span><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">app_main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>\n</span>{\n    <span>/* Initialize display  */</span>\n    <span class=\"hljs-type\">esp_lcd_panel_io_handle_t</span> io_handle = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-type\">esp_lcd_panel_handle_t</span> panel_handle = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">bsp_display_config_t</span> bsp_disp_cfg = {\n        .max_transfer_sz = DRAW_BUF_SIZE * <span class=\"hljs-built_in\">sizeof</span>(<span class=\"hljs-type\">uint16_t</span>),\n    };\n    <span class=\"hljs-built_in\">bsp_display_new</span>(&amp;bsp_disp_cfg, &amp;panel_handle, &amp;io_handle);\n\n     <span>/* Set display brightness to 100% */</span>\n    <span class=\"hljs-built_in\">bsp_display_backlight_on</span>();\n\n    std::optional&lt;<span class=\"hljs-type\">esp_lcd_touch_handle_t</span>&gt; touch_handle;\n\n    <span>/* Allocate a drawing buffer */</span>\n    <span><span class=\"hljs-type\">static</span> std::vector&lt;slint::platform::Rgb565Pixel&gt; <span class=\"hljs-title\">buffer</span><span class=\"hljs-params\">(BSP_LCD_H_RES * BSP_LCD_V_RES)</span></span>;\n\n    <span>/* Initialize Slint's ESP platform support*/</span>\n    <span class=\"hljs-built_in\">slint_esp_init</span>(slint::<span class=\"hljs-built_in\">PhysicalSize</span>({ BSP_LCD_H_RES, BSP_LCD_V_RES }), panel_handle,\n                                       touch_handle, buffer);\n    <span>/* Instantiate the UI */</span>\n    <span class=\"hljs-keyword\">auto</span> ui = AppWindow::<span class=\"hljs-built_in\">create</span>();\n    <span>/* Show it on the screen and run the event loop */</span>\n    ui-&gt;<span class=\"hljs-built_in\">run</span>();\n}\n</code></pre><ol>\n<li>Create <code>main/appwindow.slint</code> with the following contents:</li>\n</ol>\n<pre style=\"padding: 0px;\"><div class=\"flex justify-between items-center\" style=\"background-color: rgb(55, 67, 88); padding: 0rem 1rem;\"><p class=\"text-sm font-medium text-white-700\" style=\"margin:10px\">Plaintext</p><button class=\"float-right text-white rounded cursor-pointer tooltip-button\"><img src=\"/static/icons/utils/copy-b9de36a5f9c92ed5c80eb0284941cef5.svg\" alt=\"Copy To Clipboard\" width=\"16px\" height=\"16px\" style=\"filter: invert(1); margin: 0;\"></button><div role=\"tooltip\" class=\"py-2 px-3 z-10 float-right shadow-sm opacity-0 transition-opacity duration-300 text-sm font-medium text-white bg-gray-90 rounded cursor-pointer invisible tooltip rounded-lg\" data-popper-reference-hidden=\"\" data-popper-escaped=\"\" data-popper-placement=\"top\" style=\"background-color: black; position: absolute; inset: auto auto 0px 0px; margin: 0px; transform: translate3d(828px, 3171.2px, 0px);\"><p style=\"margin: 0;\">Copy to Clipboard</p><div class=\"tooltip-arrow\" data-popper-arrow=\"\" style=\"position: absolute; left: 0px; transform: translate3d(73.6px, 0px, 0px);\"></div></div></div><code id=\"codeblock-6\">import { VerticalBox, AboutSlint } from \"std-widgets.slint\";\nexport component AppWindow {\n    VerticalBox {\n        AboutSlint {}\n        Text {\n            text: \"Hello World\";\n            font-size: 18px;\n            horizontal-alignment: center;\n        }\n    }\n}\n</code></pre><ol>\n<li>Edit <code>main/CMakeLists.txt</code> to adjust for the new <code>slint-hello-world.cpp</code>, add <code>slint</code> as required component,\nand instruction the build system to compile <code>appwindow.slint</code> to <code>appwindow.h</code>. The file should look like this:</li>\n</ol>\n<pre style=\"padding: 0px;\"><div class=\"flex justify-between items-center\" style=\"background-color: rgb(55, 67, 88); padding: 0rem 1rem;\"><p class=\"text-sm font-medium text-white-700\" style=\"margin:10px\">Cmake</p><button class=\"float-right text-white rounded cursor-pointer tooltip-button\"><img src=\"/static/icons/utils/copy-b9de36a5f9c92ed5c80eb0284941cef5.svg\" alt=\"Copy To Clipboard\" width=\"16px\" height=\"16px\" style=\"filter: invert(1); margin: 0;\"></button><div role=\"tooltip\" class=\"py-2 px-3 z-10 float-right shadow-sm opacity-0 transition-opacity duration-300 text-sm font-medium text-white bg-gray-90 rounded cursor-pointer invisible tooltip rounded-lg\" data-popper-reference-hidden=\"\" data-popper-escaped=\"\" data-popper-placement=\"top\" style=\"background-color: black; position: absolute; inset: auto auto 0px 0px; margin: 0px; transform: translate3d(828px, 3607.2px, 0px);\"><p style=\"margin: 0;\">Copy to Clipboard</p><div class=\"tooltip-arrow\" data-popper-arrow=\"\" style=\"position: absolute; left: 0px; transform: translate3d(73.6px, 0px, 0px);\"></div></div></div><code class=\"hljs language-cmake\" id=\"codeblock-7\">idf_component_register(SRCS <span class=\"hljs-string\">\"slint-hello-world.cpp\"</span> INCLUDE_DIRS <span class=\"hljs-string\">\".\"</span> REQUIRES slint)\nslint_target_sources(<span class=\"hljs-variable\">${COMPONENT_LIB}</span> appwindow.slint)\n</code></pre><ol>\n<li>Open the configuration editor with <code>idf.py menuconfig</code>:<ul>\n<li>Change the stack size under <code>Component config --&gt; ESP System Settings --&gt; Main task stack size</code> to at least <code>8192</code>. You may need to tweak this value in the future if you run into stack overflows.</li>\n<li>You may need additional device-specific settings. For example if your device has external SPI RAM,\nyou may need to enable that. For details for ESP32-S3 based devices see how to <a href=\"https://docs.espressif.com/projects/esp-idf/en/latest/esp32s3/api-guides/flash_psram_config.html#configure-the-psram\">Configure the PSRAM</a>.</li>\n<li>Quit the editor with <code>Q</code> and save the configuration.</li>\n</ul>\n</li>\n</ol>\n<p>Alternatively, check in a default sdkconfig tweaked from your board that adds the right amount of ram, flash, and use <code>CONFIG_MAIN_TASK_STACK_SIZE=8192</code></p>\n<ol>\n<li>Build the project with <code>idf.py build</code>.</li>\n<li>Connect your device, then flash and run it with <code>idf.py flash monitor</code>.</li>\n<li>Observe Slint rendering \"Hello World\" on the screen \ud83c\udf89.</li>\n</ol>\n<p>Congratulations, you're all set up to develop with Slint. For more information, check out our <a href=\"https://slint.dev/docs\">online documentation</a>.</p>\n<p>If you have feedback or questions, feel free to reach out to the Slint community:</p>\n<ul>\n<li><a href=\"https://chat.slint.dev/\">Chat with us</a> on Mattermost.</li>\n<li><a href=\"https://github.com/slint-ui/slint/discussions\">Ask questions</a> on GitHub</li>\n<li>Contact us on <a href=\"https://twitter.com/slint_ui\">Twitter</a> or <a href=\"https://fosstodon.org/@slint\">Mastodon</a></li>\n<li><a href=\"https://github.com/slint-ui/slint/issues\">Report a bug</a> on Github</li>\n</ul>\n<h2 id=\"troubleshooting\">Troubleshooting</h2>\n<p>You may run into compile or run-time issues due to Slint's requirements. The following sections\ntrack issues we're aware of and how to solve them.</p>\n<h3 id=\"rust-compilation-error-during-slint-build\">Rust Compilation Error During Slint Build</h3>\n<p>You see the following error:</p>\n<pre style=\"padding: 0px;\"><div class=\"flex justify-between items-center\" style=\"background-color: rgb(55, 67, 88); padding: 0rem 1rem;\"><p class=\"text-sm font-medium text-white-700\" style=\"margin:10px\">Plaintext</p><button class=\"float-right text-white rounded cursor-pointer tooltip-button\"><img src=\"/static/icons/utils/copy-b9de36a5f9c92ed5c80eb0284941cef5.svg\" alt=\"Copy To Clipboard\" width=\"16px\" height=\"16px\" style=\"filter: invert(1); margin: 0;\"></button><div role=\"tooltip\" class=\"py-2 px-3 z-10 float-right shadow-sm opacity-0 transition-opacity duration-300 text-sm font-medium text-white bg-gray-90 rounded cursor-pointer invisible tooltip rounded-lg\" data-popper-reference-hidden=\"\" data-popper-escaped=\"\" data-popper-placement=\"top\" style=\"background-color: black; position: absolute; inset: auto auto 0px 0px; margin: 0px; transform: translate3d(828px, 4763.2px, 0px);\"><p style=\"margin: 0;\">Copy to Clipboard</p><div class=\"tooltip-arrow\" data-popper-arrow=\"\" style=\"position: absolute; left: 0px; transform: translate3d(73.6px, 0px, 0px);\"></div></div></div><code id=\"codeblock-8\">error: the `-Z` flag is only accepted on the nightly channel of Cargo, but this is the `stable` channel\n</code></pre><p>Solution: You need to configure your Rust toolchain to use the esp channel. Either set the <code>RUSTUP_TOOLCHAIN</code> environment variable to the value <code>esp</code> or create a file called <code>rust-toolchain.toml</code> in your project directory with the following contents:</p>\n<pre style=\"padding: 0px;\"><div class=\"flex justify-between items-center\" style=\"background-color: rgb(55, 67, 88); padding: 0rem 1rem;\"><p class=\"text-sm font-medium text-white-700\" style=\"margin:10px\">Toml</p><button class=\"float-right text-white rounded cursor-pointer tooltip-button\"><img src=\"/static/icons/utils/copy-b9de36a5f9c92ed5c80eb0284941cef5.svg\" alt=\"Copy To Clipboard\" width=\"16px\" height=\"16px\" style=\"filter: invert(1); margin: 0;\"></button><div role=\"tooltip\" class=\"py-2 px-3 z-10 float-right shadow-sm opacity-0 transition-opacity duration-300 text-sm font-medium text-white bg-gray-90 rounded cursor-pointer invisible tooltip rounded-lg\" data-popper-reference-hidden=\"\" data-popper-escaped=\"\" data-popper-placement=\"top\" style=\"background-color: black; position: absolute; inset: auto auto 0px 0px; margin: 0px; transform: translate3d(828px, 4974.4px, 0px);\"><p style=\"margin: 0;\">Copy to Clipboard</p><div class=\"tooltip-arrow\" data-popper-arrow=\"\" style=\"position: absolute; left: 0px; transform: translate3d(73.6px, 0px, 0px);\"></div></div></div><code class=\"hljs language-toml\" id=\"codeblock-9\"><span class=\"hljs-section\">[toolchain]</span>\n<span class=\"hljs-attr\">channel</span> = <span class=\"hljs-string\">\"esp\"</span>\n</code></pre><h3 id=\"error-compiling-slint-for-esp-idf-on-windows\">Error compiling Slint for ESP-IDF on Windows</h3>\n<p>You see errors about <code>slint-compiler</code>:</p>\n<pre style=\"padding: 0px;\"><div class=\"flex justify-between items-center\" style=\"background-color: rgb(55, 67, 88); padding: 0rem 1rem;\"><p class=\"text-sm font-medium text-white-700\" style=\"margin:10px\">Plaintext</p><button class=\"float-right text-white rounded cursor-pointer tooltip-button\"><img src=\"/static/icons/utils/copy-b9de36a5f9c92ed5c80eb0284941cef5.svg\" alt=\"Copy To Clipboard\" width=\"16px\" height=\"16px\" style=\"filter: invert(1); margin: 0;\"></button><div role=\"tooltip\" class=\"py-2 px-3 z-10 float-right shadow-sm opacity-0 transition-opacity duration-300 text-sm font-medium text-white bg-gray-90 rounded cursor-pointer invisible tooltip rounded-lg\" data-popper-reference-hidden=\"\" data-popper-escaped=\"\" data-popper-placement=\"top\" style=\"background-color: black; position: absolute; inset: auto auto 0px 0px; margin: 0px; transform: translate3d(828px, 5218.4px, 0px);\"><p style=\"margin: 0;\">Copy to Clipboard</p><div class=\"tooltip-arrow\" data-popper-arrow=\"\" style=\"position: absolute; left: 0px; transform: translate3d(73.6px, 0px, 0px);\"></div></div></div><code id=\"codeblock-10\">Error copying file (if different) from \"C:/path/build/./cargo/build/x86_64-pc-windows-msvc/release/slint-compiler\" to \"C:/path/build/_deps/slint-build\".\n</code></pre><p>Solution: At the moment development development on Windows while targeting ESP-IDF is not supported. We're working on a fix and in the meantime we recommend\nusing <a href=\"https://learn.microsoft.com/en-us/windows/wsl/\">Windows Subsystem for Linux</a>.</p>\n<h3 id=\"the-device-crashes-at-boot-or-enter-a-boot-loop\">The device crashes at boot or enter a boot loop</h3>\n<p>One reason could be that you don't have enough ram for the heap or the stack.\nMake sure that the stack is big enough (~8KiB), and that all the RAM was made available for the heap allocator.</p>\n<h2 id=\"license\">License</h2>\n<p>You can use Slint under <em><strong>any</strong></em> of the following licenses, at your choice:</p>\n<ol>\n<li><a href=\"https://github.com/slint-ui/slint/blob/master/LICENSES/GPL-3.0-only.txt\">GNU GPLv3</a>,</li>\n<li><a href=\"https://slint.dev/pricing.html\">Paid license</a>.</li>\n</ol>\n<p>See also the <a href=\"https://github.com/slint-ui/slint/blob/master/FAQ.md#licensing\">Licensing FAQ</a>.</p>\n<p>Slint is also available with a third license (Royalty Free) for desktop applications.</p>\n<h2 id=\"links\">Links</h2>\n<p><a href=\"https://slint.dev\">Website</a> \u00b7 <a href=\"https://github.com/slint-ui/slint\">GitHub</a> \u00b7 <a href=\"https://slint.dev/docs/cpp\">Docs</a></p>\n", "code": "idf.py add-dependency \"slint/slint^1.4.1\"", "last_change": "uploaded 2 weeks ago", "download_count": "Downloaded in total 71  times", "download_current_count": "This version: 7  times", "url": "https://components.espressif.com/components/slint/slint", "dependencies": {"espressif/esp_lcd_touch": ">=1.0.4", "ESP-IDF": ">=5.1"}, "links": {"Homepage": "https://slint.dev/", "Documentation": "https://slint.dev/docs", "Repository": "https://github.com/slint-ui/slint.git", "Discussion": "https://github.com/slint-ui/slint/discussions"}}